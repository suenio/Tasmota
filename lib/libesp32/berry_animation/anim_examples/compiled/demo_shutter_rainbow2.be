# Generated Berry code from Animation DSL
# Source: demo_shutter_rainbow2.anim
# 
# This file was automatically generated by compile_all_examples.sh
# Do not edit manually - changes will be overwritten

import animation

# Demo Shutter Rainbow
#
# Shutter from left to right iterating in all colors
# Auto-generated strip initialization (using Tasmota configuration)
var engine = animation.init_strip()

var duration_ = 3000
var strip_len_ = animation.strip_length(engine)
var shutter_size_ = (def (engine)
  var provider = animation.sawtooth(engine)
  provider.min_value = 0
  provider.max_value = strip_len_
  provider.duration = duration_
  return provider
end)(engine)
var col1_ = animation.color_cycle(engine)
col1_.palette = animation.PALETTE_RAINBOW
col1_.cycle_period = 0
var col2_ = animation.color_cycle(engine)
col2_.palette = animation.PALETTE_RAINBOW
col2_.cycle_period = 0
col2_.next = 1
var shutter_animation_ = animation.beacon_animation(engine)
shutter_animation_.color = col1_
shutter_animation_.back_color = col2_
shutter_animation_.pos = 0
shutter_animation_.beacon_size = shutter_size_
shutter_animation_.slew_size = 0
shutter_animation_.priority = 5
log(f"foobar", 3)
var shutter_run_ = animation.SequenceManager(engine, -1)
  .push_closure_step(def (engine) log(f"before", 3) end)
  .push_play_step(shutter_animation_, animation.resolve(duration_))
  .push_closure_step(def (engine) log(f"after", 3) end)
  .push_closure_step(def (engine) col1_.next = 1 end)
  .push_closure_step(def (engine) col2_.next = 1 end)
  .push_closure_step(def (engine) log(f"next", 3) end)
engine.add(shutter_run_)
engine.run()


#- Original DSL source:
# Demo Shutter Rainbow
#
# Shutter from left to right iterating in all colors

set duration = 3s
  
  set strip_len = strip_length()
  set shutter_size = sawtooth(min_value = 0, max_value = strip_len, duration = duration)

  color col1 = color_cycle(palette=PALETTE_RAINBOW, cycle_period=0)
  color col2 = color_cycle(palette=PALETTE_RAINBOW, cycle_period=0)
  col2.next = 1

  animation shutter_animation = beacon_animation(
    color = col1
    back_color = col2
    pos = 0
    beacon_size = shutter_size
    slew_size = 0
    priority = 5
  )
  log("foobar")
  sequence shutter_run repeat forever {
    log("before")
    play shutter_animation for duration
    log("after")
    col1.next = 1
    col2.next = 1
    log("next")
  }

  run shutter_run

-#
